'use strict';

// 1. Для практикума из занятия 7 продумать, где можно применить замыкания.

/* ответ: Мы могли бы успешно скрыть все наши внутренние объекты игры внутри замыкания, тогда тот, кто будет смотреть
какие методы предоставляет наш код вообще не знал бы о существовании объекта змейки, объекта еды и т.д. Пользователю
мы оставили бы только один метод, это метод init, все остальные методы и объекты - это вещи, которые нужны для
работоспособности нашей программы */

/* 2. Не выполняя кода, ответить, что выведет браузер и почему:


if (!("a" in window)) {
    var a = 1;
}
alert(a);

ответ: a === undefined. При загрузке скрипта, переменные которые создаются с помощью var, сразу создаются и после этого начинает
выполняться сам скрипт, и на момент выполнения "a" in window у нас уже будет переменная 'a' в которой будет undefined,
по умолчанию эти переменные записываются в объект window, в итоге мы не попадем в if и в alert выведется undefined.

var b = function a(x) {
    x && a(--x);
};
alert(a);

ответ: Функции a не будет, эта функция присваивается в переменную b

function a(x) {
    return x * 2;
}
var a;
alert(a);

ответ: В переменной 'a' будет лежать функция. Функции созданные с помощью function, а также переменные var создаются в самом начале скрипта
и только один раз, т.е. когда интерпретатор начнет разбирать какие переменные надо создать еще до выполнения скрипта, он наткнется на функцию
'a', создаст переменную и положит в эту переменную функцию, после он увидит что создается с помощью var переменная 'a', но так как она уже была
создана он ничего делать не станет. Затем начнется выполнение скрипта, который и выведет нам функцию.

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

ответ: Внутри функции arguments - это наши параметры, третий параметр - это параметр 'a', значит в переменную 'a' мы сначала положим 10 вместо
тройки, а затем выведем. При 'use strict' arguments отделен от параметров функции, т.е. если бы мы использовали все это дело с 'use strict', то
мы бы получили 3 в alert(a)

function a() {
    alert(this);
}
a.call(null);

ответ: Если контекст null, тогда контекст будет взят извне, при условии что не используется "use strict". Если бы "use strict" был, то контекст
был бы null внутри функции.

*/